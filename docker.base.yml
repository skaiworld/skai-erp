services:
  backend:
    image: ghcr.io/skaiworld/skai-erp:${SKAI_VERSION}
    deploy:
      restart_policy:
        condition: on-failure
    depends_on:
      - db
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs
    expose:
      - 8000

  create-site:
    image: ghcr.io/skaiworld/skai-erp:${SKAI_VERSION}
    deploy:
      restart_policy:
        condition: none
    environment:
      DB_HOST: db
      DB_PORT: "3306"
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_CACHE: redis-cache:6379
      REDIS_QUEUE: redis-queue:6379
      SOCKETIO_PORT: "9000"
      FRAPPE_SITE_NAME_HEADER: ${FRAPPE_SITE_NAME_HEADER}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs
    entrypoint:
      - bash
      - -c
    command:
      - >
        ls -1 apps > sites/apps.txt;
        bench set-config -g db_host $$DB_HOST;
        bench set-config -gp db_port $$DB_PORT;
        bench set-config -g redis_cache "redis://$$REDIS_CACHE";
        bench set-config -g redis_queue "redis://$$REDIS_QUEUE";
        bench set-config -g redis_socketio "redis://$$REDIS_QUEUE";
        bench set-config -gp socketio_port $$SOCKETIO_PORT;
        wait-for-it -t 120 $$DB_HOST:$$DB_PORT;
        wait-for-it -t 120 $$REDIS_CACHE;
        wait-for-it -t 120 $$REDIS_QUEUE;
        export start=`date +%s`;
        until [[ -n `grep -hs ^ sites/common_site_config.json | jq -r ".db_host // empty"` ]] && \
          [[ -n `grep -hs ^ sites/common_site_config.json | jq -r ".redis_cache // empty"` ]] && \
          [[ -n `grep -hs ^ sites/common_site_config.json | jq -r ".redis_queue // empty"` ]];
        do
          echo "Waiting for sites/common_site_config.json to be created";
          sleep 5;
          if (( `date +%s`-start > 120 )); then
            echo "could not find sites/common_site_config.json with required keys";
            exit 1
          fi
        done;
        echo "sites/common_site_config.json found";
        bench new-site --no-mariadb-socket --admin-password=$$ADMIN_PASSWORD --db-root-password=$$DB_PASSWORD --install-app skaiui --set-default $$FRAPPE_SITE_NAME_HEADER;
        bench migrate;

  db:
    image: mariadb:10.6
    healthcheck:
      test: mysqladmin ping -h localhost --password=${DB_PASSWORD}
      interval: 1s
      retries: 15
    deploy:
      restart_policy:
        condition: on-failure
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --skip-character-set-client-handshake
      - --skip-innodb-read-only-compressed # Temporary fix for MariaDB 10.6
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:?No db password set}
    volumes:
      - db-data:/var/lib/mysql

  worker:
    image: ghcr.io/skaiworld/skai-erp:${SKAI_VERSION}
    deploy:
      restart_policy:
        condition: on-failure
    depends_on:
      - backend
    command:
      - worker.sh
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs

  redis-queue:
    image: redis:6.2-alpine
    deploy:
      restart_policy:
        condition: on-failure
    volumes:
      - redis-queue-data:/data

  redis-cache:
    image: redis:6.2-alpine
    deploy:
      restart_policy:
        condition: on-failure
    volumes:
      - redis-cache-data:/data

  websocket:
    image: ghcr.io/skaiworld/skai-erp:${SKAI_VERSION}
    deploy:
      restart_policy:
        condition: on-failure
    depends_on:
      - backend
    command:
      - node
      - /home/frappe/frappe-bench/apps/frappe/socketio.js
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs
    expose:
      - 9000

  postgres:
    image: postgres:16.1-alpine
    restart: unless-stopped
    volumes:
      - postgresdata:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: synapse
      POSTGRES_USER: synapse
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_INITDB_ARGS: --encoding='UTF8' --lc-collate='C' --lc-ctype='C'

  create-synapse:
    image: matrixdotorg/synapse:v1.97.0
    depends_on:
      - postgres
    volumes:
      - synapse-data:/data
      - ./configurator.py:/configurator.py
    environment:
      SYNAPSE_SERVER: ${SYNAPSE_SERVER}
      SYNAPSE_SERVER_NAME: ${DOMAIN}
      SYNAPSE_REPORT_STATS: no
      PG_PASSWORD: ${PG_PASSWORD}
      SYNAPSE_ADMIN: ${SYNAPSE_ADMIN}
      SYNAPSE_PASSWORD: ${SYNAPSE_PASSWORD}
      SYNAPSE_SMTP_HOST: ${SYNAPSE_SMTP_HOST}
      SYNAPSE_SMTP_USER: ${SYNAPSE_SMTP_USER}
      SYNAPSE_SMTP_PASS: ${SYNAPSE_SMTP_PASS}
    entrypoint:
      - bash
      - -c
    command:
      - >
        python3 /configurator.py synapse;

  synapse:
    image: matrixdotorg/synapse:v1.97.0
    depends_on:
      - create-synapse
    restart: unless-stopped
    volumes:
      - synapse-data:/data
    expose:
      - 8008
    labels:
      - traefik.enable=true
      - traefik.http.services.matrix.loadbalancer.server.port=8008
      - traefik.http.routers.matrix-http.rule=Host(`${DOMAIN}`) && (PathPrefix(`/_matrix`) || PathPrefix(`/_synapse`) || PathPrefix(`/.well-known/matrix`))
      - traefik.http.routers.matrix-http.entrypoints=matrix
      - traefik.http.routers.matrix-http.service=matrix
      - traefik.http.routers.matrix-http.priority=2

  frontend:
    image: ghcr.io/skaiworld/skai-erp:${SKAI_VERSION}
    deploy:
      restart_policy:
        condition: on-failure
    depends_on:
      - backend
    entrypoint:
      - bash
      - -c
    command:
      - >
        bench build;
        python3 /configurator.py element;
        nginx-entrypoint.sh;
    environment:
      BACKEND: backend:8000
      SOCKETIO: websocket:9000
      FRAPPE_SITE_NAME_HEADER: ${FRAPPE_SITE_NAME_HEADER:-$$host}
      UPSTREAM_REAL_IP_ADDRESS: ${UPSTREAM_REAL_IP_ADDRESS:-127.0.0.1}
      UPSTREAM_REAL_IP_HEADER: ${UPSTREAM_REAL_IP_HEADER:-X-Forwarded-For}
      UPSTREAM_REAL_IP_RECURSIVE: ${UPSTREAM_REAL_IP_RECURSIVE:-off}
      PROXY_READ_TIMOUT: ${PROXY_READ_TIMOUT:-120}
      CLIENT_MAX_BODY_SIZE: ${CLIENT_MAX_BODY_SIZE:-50m}
      SYNAPSE_SERVER: ${SYNAPSE_SERVER}
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs
      - ./configurator.py:/configurator.py
    labels:
      - traefik.enable=true
      - traefik.http.services.frontend.loadbalancer.server.port=8080
      - traefik.http.routers.frontend-http.rule=Host(`${DOMAIN}`)
      - traefik.http.routers.frontend-http.entrypoints=web
      - traefik.http.routers.frontend-http.service=frontend
      - traefik.http.routers.frontend-http.priority=1

  proxy:
    image: traefik:2.5
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.matrix.address=:8008
      - --entrypoints.dash.address=:8080
      - --accesslog
      - --log
      - --api=true
      - --api.dashboard=true

    ports:
      - 80:80
      - 443:443
      - 8008:8008
      - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - traefik.enable=true
      - traefik.http.routers.dash.entryPoints=dash
      - traefik.http.routers.dash.rule=HostRegexp(`{any:.+}`)
      - traefik.http.routers.dash.service=api@internal
      - traefik.http.routers.dash.middlewares=dash-auth@docker
      - traefik.http.middlewares.dash-auth.basicauth.users=${TRAEFIK_PASS}

volumes:
  db-data:
  redis-queue-data:
  redis-cache-data:
  sites:
  logs:
  postgresdata:
  synapse-data:
